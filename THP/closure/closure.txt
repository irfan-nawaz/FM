Closure:
    - closure enables pro-level functions like 'once' & 'memorize'.
        - using closures we can achive memorization in our functions which is a core performance optimizer.
        - this is going to allow us to not repeat tasks, calculations if we havew already done them before.
    - many javascript design patterns including the module pattern use closure.
    - closures are used in building iterators, handling partial applications, currying & maintain state in an asynchronous world.

Functions with memories:
    - When our functions get called, we create a live store of data (local memory/variable environment/state) for that functionâ€™s execution context.
    - When the function finishes executing, its local memory is deleted (except the returned value).
    - But what if our functions could hold on to live data between executions?
    - This would let our function definitions have an associated cache/persistent memory.
    - But it all starts with us returning a function from another function.