Assignment With Dots:
    - We use dot assignment with objects. 
        - which covers the following cases:
            - objects
            - arrays
            - functions
            - string methods (string will be converted to stringObjects by javaScript)
            - promises (promises are objects by default)
            - prototype methods
            - native methods like for array, string, object, functions.
            - nested objects
            - spread operator
Objects:

    - The key in object's key value pair will be auto converted to string if in case if we want to give numbers we have to give key in string (i.e "").

    - Dots can be seen on:
                            -   a method on an object,
                            -   with functions like (promise.then),
                            -   with array's methods,
                            -   nested objects,
                            -   prototype methods,
                            -   spreaqd operator,...

    Note: Anything with dot in JavaScript is an object

    - looping through objects:
        - for (var key in object) {}


primitive values:
     
    - They will be stored directly in memory and if we create another primitive value then it will be stored in new memory location so we dont have to worry about the previous code.

    - Called pass by value.

    ex: string, number, boolian, null, undefined,...

Non- primitive:
    - Stored in memory which being refrenced by anotehr memory(pointer) the memory points to another memory location where it is actually stored, we need to worry if we change later as the previous lines of code might get affected if this non-primitive is used before.

    - Called pass by refrence.

    ex: object, array, function,...

Note: see below blog to understand clearly,
  |->    https://www.freecodecamp.org/news/primitive-vs-reference-data-types-in-javascript/
  |->    https://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/
  |->    https://www.youtube.com/watch?v=9ooYYRLdg_g



Arrays:
    - Arrays are objects with some of their propritary methods.
    - arrays are propritarily stored in key pairs of strings "0","1",,,
    - but we can also store other key value pairs inside an array like array.name = "arrayName".
    - we can access such above key value pair by object notation (i.e console.log(array.name).)
    - but adding key value pairs other than numerical indices will not increase the lenth of array.
    - the usual array's key value pairs(numerical indices) can be accessed by using bracket notataion (i.e consoe.log(array[0]).)
    - understand the difference between the properties and methods of a datatype like array or object etc,...
        -> E.X array.length() , array.name are called properties weather they have any use or not
               array.push() , array.pop() are called methods generally we can identify methods as they have brackets to them.

DOT Notation:
    - dot nothations are only limited to strings we can only use (.name) where "name" can only be string otherwise it will result in error. 
    - we cannot use numbers in dot notation as it will give a syntax error as it will start looking for number directly instead of converting it to a string.
    - there are some other expressions along with numbers called Non-Valid Characters: (',^,&,*,....) which will give syntax errors if used in dot notation.
    - but especially for numbers when used in bracket notation we need not give it as string as they will be auto-converted into strings by JS, and for all other  Non-Valid Characters: (',^,&,*,....) we need to give them as strings in brackets.
    
NOTE: dot notation basically transforms into brackaet notation with strings, so in every case where we use dot notation we can use bracket with strings inside it
    - .something <==> ["something"]
    
BRACKET Notation:   
    - brackets are used in case when we are not able to use the dot notation.
    - then the reason to use dot notation is simply that it is more easy to type than bracket notation
    - in brackets we can perform any operation or give variables, functions,etc... so if we don't specify it as string in brackets it will look for any variable or function and return error if not found, if we actually want to use variable, function or give any mathematical operation as the input to the object then we can use bracket without any strings i.e"".
    - the brackets used for objects or arrays can perform following:
        - pass numbers,
        - pass strings
        - perform mathematial operations
        - pass IFFE functions,...

- looping through arrays:
    - for (let i = 0; i < array.length; i++) {}



Non-Valid Characters: (',^,&,*,....)
    - Try to avoid using these non-valid characters as your object's keys.
    - if in case you have to then use them in a bracket notation (ex -> obj["^'&*"] = "value").
    - 


Destructuring:
    - It is a smilpler way to variable declaration which can save time by non-repetiton.
    - It consists of target and source
